{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dnsRecordsError_1 = __importStar(require(\"../errors/dnsRecordsError\"));\n\nvar publicTypes_1 = require(\"../types/publicTypes\");\n\nvar DnsUtils =\n/** @class */\nfunction () {\n  function DnsUtils() {}\n\n  DnsUtils.prototype.toList = function (record) {\n    var _a;\n\n    var _this = this;\n\n    var dnsTypes = this.getAllDnsTypes(record);\n    return (_a = []).concat.apply(_a, dnsTypes.map(function (type) {\n      return _this.constructDnsRecords(record, type);\n    }));\n  };\n\n  DnsUtils.prototype.toCrypto = function (records) {\n    var cryptoRecords = {};\n\n    for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {\n      var record = records_1[_i];\n      var type = record.type,\n          TTL = record.TTL,\n          data = record.data;\n      var ttlInRecord = this.getJsonNumber(cryptoRecords[\"dns.\" + type + \".ttl\"]);\n      var dnsInRecord = this.getJsonArray(cryptoRecords, \"dns.\" + type);\n\n      if (dnsInRecord) {\n        dnsInRecord.push(data);\n        cryptoRecords[\"dns.\" + type] = JSON.stringify(dnsInRecord);\n      } else {\n        cryptoRecords[\"dns.\" + type] = JSON.stringify([data]);\n        cryptoRecords[\"dns.\" + type + \".ttl\"] = TTL.toString(10);\n      }\n\n      if (!!ttlInRecord && ttlInRecord !== TTL) {\n        throw new dnsRecordsError_1.default(dnsRecordsError_1.DnsRecordsErrorCode.InconsistentTtl, {\n          recordType: type\n        });\n      }\n    }\n\n    return cryptoRecords;\n  };\n\n  DnsUtils.prototype.protectFromCorruptRecord = function (rawRecord, type) {\n    try {\n      return rawRecord ? JSON.parse(rawRecord) : undefined;\n    } catch (err) {\n      if (err instanceof SyntaxError) {\n        throw new dnsRecordsError_1.default(dnsRecordsError_1.DnsRecordsErrorCode.DnsRecordCorrupted, {\n          recordType: type\n        });\n      }\n\n      throw err;\n    }\n  };\n\n  DnsUtils.prototype.getJsonArray = function (cryptoRecrods, key) {\n    var rawRecord = cryptoRecrods[key];\n    var type = key.split('.')[1];\n    return this.protectFromCorruptRecord(rawRecord, type);\n  };\n\n  DnsUtils.prototype.getJsonNumber = function (rawRecord) {\n    return rawRecord ? parseInt(rawRecord, 10) : undefined;\n  };\n\n  DnsUtils.prototype.getAllDnsTypes = function (records) {\n    var keys = new Set();\n    Object.keys(records).forEach(function (key) {\n      var chunks = key.split('.');\n      var type = chunks[1] && chunks[1] !== 'ttl';\n\n      if (type) {\n        keys.add(publicTypes_1.DnsRecordType[chunks[1]]);\n      }\n    });\n    return Array.from(keys);\n  };\n\n  DnsUtils.prototype.constructDnsRecords = function (cryptoData, type) {\n    var TTL = this.parseTtl(cryptoData, type);\n    var jsonValueString = cryptoData[\"dns.\" + type];\n\n    if (!jsonValueString) {\n      return [];\n    }\n\n    var typeData = this.protectFromCorruptRecord(jsonValueString, type);\n\n    if (!this.isStringArray(typeData)) {\n      return [];\n    }\n\n    return typeData.map(function (data) {\n      return {\n        TTL: TTL,\n        data: data,\n        type: type\n      };\n    });\n  };\n\n  DnsUtils.prototype.parseTtl = function (data, type) {\n    var defaultTtl = data['dns.ttl'];\n    var recordTtl = data[\"dns.\" + type + \".ttl\"];\n\n    if (recordTtl) {\n      var parsedInt = this.parseIfNumber(recordTtl);\n\n      if (parsedInt) {\n        return parsedInt;\n      }\n    }\n\n    if (defaultTtl) {\n      var parsedInt = this.parseIfNumber(defaultTtl);\n\n      if (parsedInt) {\n        return parsedInt;\n      }\n    }\n\n    return DnsUtils.DefaultTtl;\n  };\n\n  DnsUtils.prototype.parseIfNumber = function (str) {\n    var parsedInt = parseInt(str, 10);\n\n    if (!isNaN(parsedInt)) {\n      return parsedInt;\n    }\n  };\n\n  DnsUtils.prototype.isStringArray = function (value) {\n    if (value instanceof Array) {\n      return value.every(function (item) {\n        return typeof item === 'string';\n      });\n    }\n\n    return false;\n  };\n\n  DnsUtils.DefaultTtl = 300; // 5 minutes\n\n  return DnsUtils;\n}();\n\nexports.default = DnsUtils;","map":{"version":3,"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","dnsRecordsError_1","require","publicTypes_1","DnsUtils","prototype","toList","record","_a","_this","dnsTypes","getAllDnsTypes","concat","apply","map","type","constructDnsRecords","toCrypto","records","cryptoRecords","_i","records_1","length","TTL","data","ttlInRecord","getJsonNumber","dnsInRecord","getJsonArray","push","JSON","stringify","toString","default","DnsRecordsErrorCode","InconsistentTtl","recordType","protectFromCorruptRecord","rawRecord","parse","undefined","err","SyntaxError","DnsRecordCorrupted","cryptoRecrods","key","split","parseInt","keys","Set","forEach","chunks","add","DnsRecordType","Array","from","cryptoData","parseTtl","jsonValueString","typeData","isStringArray","defaultTtl","recordTtl","parsedInt","parseIfNumber","DefaultTtl","str","isNaN","every","item"],"sources":["/Users/mac/Desktop/work/wave-frontend/node_modules/@unstoppabledomains/resolution/build/utils/DnsUtils.js"],"sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dnsRecordsError_1 = __importStar(require(\"../errors/dnsRecordsError\"));\nvar publicTypes_1 = require(\"../types/publicTypes\");\nvar DnsUtils = /** @class */ (function () {\n    function DnsUtils() {\n    }\n    DnsUtils.prototype.toList = function (record) {\n        var _a;\n        var _this = this;\n        var dnsTypes = this.getAllDnsTypes(record);\n        return (_a = []).concat.apply(_a, dnsTypes.map(function (type) { return _this.constructDnsRecords(record, type); }));\n    };\n    DnsUtils.prototype.toCrypto = function (records) {\n        var cryptoRecords = {};\n        for (var _i = 0, records_1 = records; _i < records_1.length; _i++) {\n            var record = records_1[_i];\n            var type = record.type, TTL = record.TTL, data = record.data;\n            var ttlInRecord = this.getJsonNumber(cryptoRecords[\"dns.\" + type + \".ttl\"]);\n            var dnsInRecord = this.getJsonArray(cryptoRecords, \"dns.\" + type);\n            if (dnsInRecord) {\n                dnsInRecord.push(data);\n                cryptoRecords[\"dns.\" + type] = JSON.stringify(dnsInRecord);\n            }\n            else {\n                cryptoRecords[\"dns.\" + type] = JSON.stringify([data]);\n                cryptoRecords[\"dns.\" + type + \".ttl\"] = TTL.toString(10);\n            }\n            if (!!ttlInRecord && ttlInRecord !== TTL) {\n                throw new dnsRecordsError_1.default(dnsRecordsError_1.DnsRecordsErrorCode.InconsistentTtl, {\n                    recordType: type,\n                });\n            }\n        }\n        return cryptoRecords;\n    };\n    DnsUtils.prototype.protectFromCorruptRecord = function (rawRecord, type) {\n        try {\n            return rawRecord ? JSON.parse(rawRecord) : undefined;\n        }\n        catch (err) {\n            if (err instanceof SyntaxError) {\n                throw new dnsRecordsError_1.default(dnsRecordsError_1.DnsRecordsErrorCode.DnsRecordCorrupted, {\n                    recordType: type,\n                });\n            }\n            throw err;\n        }\n    };\n    DnsUtils.prototype.getJsonArray = function (cryptoRecrods, key) {\n        var rawRecord = cryptoRecrods[key];\n        var type = key.split('.')[1];\n        return this.protectFromCorruptRecord(rawRecord, type);\n    };\n    DnsUtils.prototype.getJsonNumber = function (rawRecord) {\n        return rawRecord ? parseInt(rawRecord, 10) : undefined;\n    };\n    DnsUtils.prototype.getAllDnsTypes = function (records) {\n        var keys = new Set();\n        Object.keys(records).forEach(function (key) {\n            var chunks = key.split('.');\n            var type = chunks[1] && chunks[1] !== 'ttl';\n            if (type) {\n                keys.add(publicTypes_1.DnsRecordType[chunks[1]]);\n            }\n        });\n        return Array.from(keys);\n    };\n    DnsUtils.prototype.constructDnsRecords = function (cryptoData, type) {\n        var TTL = this.parseTtl(cryptoData, type);\n        var jsonValueString = cryptoData[\"dns.\" + type];\n        if (!jsonValueString) {\n            return [];\n        }\n        var typeData = this.protectFromCorruptRecord(jsonValueString, type);\n        if (!this.isStringArray(typeData)) {\n            return [];\n        }\n        return typeData.map(function (data) { return ({ TTL: TTL, data: data, type: type }); });\n    };\n    DnsUtils.prototype.parseTtl = function (data, type) {\n        var defaultTtl = data['dns.ttl'];\n        var recordTtl = data[\"dns.\" + type + \".ttl\"];\n        if (recordTtl) {\n            var parsedInt = this.parseIfNumber(recordTtl);\n            if (parsedInt) {\n                return parsedInt;\n            }\n        }\n        if (defaultTtl) {\n            var parsedInt = this.parseIfNumber(defaultTtl);\n            if (parsedInt) {\n                return parsedInt;\n            }\n        }\n        return DnsUtils.DefaultTtl;\n    };\n    DnsUtils.prototype.parseIfNumber = function (str) {\n        var parsedInt = parseInt(str, 10);\n        if (!isNaN(parsedInt)) {\n            return parsedInt;\n        }\n    };\n    DnsUtils.prototype.isStringArray = function (value) {\n        if (value instanceof Array) {\n            return value.every(function (item) { return typeof item === 'string'; });\n        }\n        return false;\n    };\n    DnsUtils.DefaultTtl = 300; // 5 minutes\n    return DnsUtils;\n}());\nexports.default = DnsUtils;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}