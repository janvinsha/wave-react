{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/work/wave-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport abi from \"./utils/WavePortal.json\";\nimport * as UAuthWeb3Modal from \"@uauth/web3modal\";\nimport UAuthSPA from \"@uauth/js\";\nimport Web3Modal from \"web3modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const uauthOptions = {\n  clientID: \"3418be8d-f3d7-4014-ac38-cd0ae4e54cd0\",\n  redirectUri: \"https://wave-jvs.netlify.app\",\n  scope: \"openid wallet\"\n};\nlet providerOptions = {\n  \"custom-uauth\": {\n    // The UI Assets\n    display: UAuthWeb3Modal.display,\n    // The Connector\n    connector: UAuthWeb3Modal.connector,\n    // The SPA libary\n    package: UAuthSPA,\n    // The SPA libary options\n    options: uauthOptions\n  }\n};\nconst web3Modal = new Web3Modal({\n  providerOptions,\n  cacheProvider: true,\n  theme: `light`\n});\nUAuthWeb3Modal.registerWeb3Modal(web3Modal);\nexport default function App() {\n  _s();\n\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  /**\n   * Create a variable here that holds the contract address after you deploy!\n   */\n\n  const contractAddress = \"0x81739106e96196efA87F558D41a5412249BBC2cC\";\n  const contractABI = abi.abi;\n  /*\n   * Create a method that gets all waves from your contract\n   */\n\n  const getAllWaves = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const waves = await wavePortalContract.getAllWaves();\n        const wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          };\n        });\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const accounts = await (provider === null || provider === void 0 ? void 0 : provider.listAccounts());\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n          getAllWaves();\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        web3Modal.clearCachedProvider();\n      }\n\n      const wallet = await web3Modal.connect();\n      const tProvider = new ethers.providers.Web3Provider(wallet);\n      const accounts = await tProvider.listAccounts();\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        /*\n         * Execute the actual wave from your smart contract\n         */\n\n        const waveTxn = wavePortalContract.wave(message, {\n          gasLimit: 300000\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * Listen in for emitter events!\n   */\n\n\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [...prevState, {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message\n      }]);\n    };\n\n    if (web3Modal.cachedProvider) {\n      let wallet = web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(wallet);\n      const signer = provider.getSigner();\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"\\uD83E\\uDD3AHello!\\uD83E\\uDD3A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bio\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"I am Janvinsha\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"Full-Stack developer with good experience in programming and a drive to solve problems.\", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Specialties\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), \"React, React Native, Redux, React Context, Data structures and Algorithms, Javascript, Typescript, Python, Solidity, Ganache, Truffle, Hardhat, Web3, Git, Nodejs, MongoDB, Html, Css, Sass, JQuery, Styled-components, Framer-motion, MVC Architecture, Test Driven Development (TDD)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"links\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://github.com/janvinsha\",\n            children: \"Github\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://jandevincent.com\",\n            children: \"Porfolio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://www.linkedin.com/in/jande-vincent-1650431b9\",\n            children: \"LinkedIn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"http://www.twitter.com/janvinsha\",\n            children: \"Twitter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), currentAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"waveTextArea\",\n          rows: \"4\",\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          placeholder: \"Write a message for me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"waveButton\",\n          onClick: wave,\n          children: \"Wave and send message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), !currentAccount && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"waveButton\",\n        onClick: connectWallet,\n        children: \"Connect Wallet to Wave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this), allWaves.map((wave, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wavesBox\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Address: \", wave.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Time: \", wave.timestamp.toString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Message: \", wave.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"p5WD5k2v7MPMLq2ecjSZ8cSePTA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","abi","UAuthWeb3Modal","UAuthSPA","Web3Modal","uauthOptions","clientID","redirectUri","scope","providerOptions","display","connector","package","options","web3Modal","cacheProvider","theme","registerWeb3Modal","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","contractABI","getAllWaves","cachedProvider","wallet","connect","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","console","log","error","checkIfWalletIsConnected","accounts","listAccounts","length","account","connectWallet","clearCachedProvider","tProvider","count","getTotalWaves","toNumber","waveTxn","gasLimit","hash","wait","onNewWave","from","prevState","on","off","e","target","value","index","toString"],"sources":["/Users/mac/Desktop/work/wave-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport abi from \"./utils/WavePortal.json\";\nimport * as UAuthWeb3Modal from \"@uauth/web3modal\";\nimport UAuthSPA from \"@uauth/js\";\nimport Web3Modal from \"web3modal\";\n\nexport const uauthOptions = {\n  clientID: \"3418be8d-f3d7-4014-ac38-cd0ae4e54cd0\",\n  redirectUri: \"https://wave-jvs.netlify.app\",\n  scope: \"openid wallet\",\n};\n\nlet providerOptions = {\n  \"custom-uauth\": {\n    // The UI Assets\n    display: UAuthWeb3Modal.display,\n\n    // The Connector\n    connector: UAuthWeb3Modal.connector,\n\n    // The SPA libary\n    package: UAuthSPA,\n\n    // The SPA libary options\n    options: uauthOptions,\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  providerOptions,\n  cacheProvider: true,\n  theme: `light`,\n});\n\nUAuthWeb3Modal.registerWeb3Modal(web3Modal);\n\nexport default function App() {\n  /*\n   * Just a state variable we use to store our user's public wallet.\n   */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  /**\n   * Create a variable here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0x81739106e96196efA87F558D41a5412249BBC2cC\";\n\n  const contractABI = abi.abi;\n\n  /*\n   * Create a method that gets all waves from your contract\n   */\n  const getAllWaves = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        const waves = await wavePortalContract.getAllWaves();\n\n        const wavesCleaned = waves.map((wave) => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          };\n        });\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const accounts = await provider?.listAccounts();\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n          getAllWaves();\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        web3Modal.clearCachedProvider();\n      }\n      const wallet = await web3Modal.connect();\n      const tProvider = new ethers.providers.Web3Provider(wallet);\n      const accounts = await tProvider.listAccounts();\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        /*\n         * Execute the actual wave from your smart contract\n         */\n        const waveTxn = wavePortalContract.wave(message, { gasLimit: 300000 });\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * Listen in for emitter events!\n   */\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    if (web3Modal.cachedProvider) {\n      let wallet = web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(wallet);\n      const signer = provider.getSigner();\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">🤺Hello!🤺</div>\n\n        <div className=\"bio\">\n          <h2>I am Janvinsha</h2>\n          <p>\n            {\" \"}\n            Full-Stack developer with good experience in programming and a drive\n            to solve problems.\n            <h3>Specialties</h3>\n            React, React Native, Redux, React Context, Data structures and\n            Algorithms, Javascript, Typescript, Python, Solidity, Ganache,\n            Truffle, Hardhat, Web3, Git, Nodejs, MongoDB, Html, Css, Sass,\n            JQuery, Styled-components, Framer-motion, MVC Architecture, Test\n            Driven Development (TDD)\n          </p>\n          <h3>Contact</h3>\n          <span className=\"links\">\n            <a href=\"https://github.com/janvinsha\">Github</a>\n            <a href=\"https://jandevincent.com\">Porfolio</a>\n            <a href=\"https://www.linkedin.com/in/jande-vincent-1650431b9\">\n              LinkedIn\n            </a>\n            <a href=\"http://www.twitter.com/janvinsha\">Twitter</a>\n          </span>\n        </div>\n        {currentAccount && (\n          <>\n            <textarea\n              className=\"waveTextArea\"\n              rows=\"4\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Write a message for me\"\n            />\n            <button className=\"waveButton\" onClick={wave}>\n              Wave and send message\n            </button>\n          </>\n        )}\n        {/*\n         * If there is no currentAccount render this button\n         */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet to Wave\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div key={index} className=\"wavesBox\">\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}