"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var js_sha3_1 = require("js-sha3");
var js_sha256_1 = require("js-sha256");
var buffer_1 = require("buffer");
var bn_js_1 = __importDefault(require("bn.js"));
function eip137Namehash(domain) {
    var arr = hashArray(domain, js_sha3_1.keccak_256);
    return arrayToHex(arr);
}
exports.eip137Namehash = eip137Namehash;
function eip137Childhash(parentHash, label) {
    return childhash(parentHash, label, js_sha3_1.keccak_256);
}
exports.eip137Childhash = eip137Childhash;
function znsNamehash(domain) {
    var arr = hashArray(domain, js_sha256_1.sha256);
    return arrayToHex(arr);
}
exports.znsNamehash = znsNamehash;
function znsChildhash(parentHash, label) {
    return childhash(parentHash, label, js_sha256_1.sha256);
}
exports.znsChildhash = znsChildhash;
function childhash(parentHash, label, hashingAlgo) {
    var parent = parentHash.replace(/^0x/, '');
    var childHash = hashingAlgo.hex(label);
    return "0x" + hashingAlgo.hex(buffer_1.Buffer.from("" + parent + childHash, 'hex'));
}
function hashArray(domain, hashingAlgo) {
    if (!domain) {
        return Array.from(new Uint8Array(32));
    }
    var _a = domain.split('.'), label = _a[0], remainder = _a.slice(1);
    var labelHash = hashingAlgo.array(label);
    var remainderHash = hashArray(remainder.join('.'), hashingAlgo);
    return hashingAlgo.array(new Uint8Array(__spreadArrays(remainderHash, labelHash)));
}
function arrayToHex(arr) {
    return "0x" + Array.prototype.map
        .call(arr, function (x) { return ('00' + x.toString(16)).slice(-2); })
        .join('');
}
function fromHexStringToDecimals(value) {
    if (value.startsWith('0x')) {
        var valueWithoutPrefix = value.slice(2, value.length);
        var bn = new bn_js_1.default(valueWithoutPrefix, 16);
        return bn.toString(10);
    }
    return value;
}
exports.fromHexStringToDecimals = fromHexStringToDecimals;
function fromDecStringToHex(value) {
    if (!value.startsWith('0x')) {
        var bn = new bn_js_1.default(value, 10);
        return "0x" + bn.toString(16);
    }
    return value;
}
exports.fromDecStringToHex = fromDecStringToHex;
