"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var publicTypes_1 = require("../types/publicTypes");
var types_1 = require("../types");
function signedInfuraLink(infura, network) {
    if (network === void 0) { network = 'mainnet'; }
    return "https://" + network + ".infura.io/v3/" + infura;
}
exports.signedInfuraLink = signedInfuraLink;
function hexToBytes(hexString) {
    var hex = hexString.replace(/^0x/i, '');
    var bytes = [];
    for (var c = 0; c < hex.length; c += 2) {
        bytes.push(parseInt(hex.substr(c, 2), 16));
    }
    return bytes;
}
exports.hexToBytes = hexToBytes;
function isNullAddress(key) {
    if (!key) {
        return true;
    }
    return Object.values(types_1.NullAddresses).includes(key);
}
exports.isNullAddress = isNullAddress;
function constructRecords(keys, values) {
    var records = {};
    keys.forEach(function (key, index) {
        records[key] =
            (values instanceof Array ? values[index] : values === null || values === void 0 ? void 0 : values[key]) || '';
    });
    return records;
}
exports.constructRecords = constructRecords;
exports.domainExtensionToNamingServiceName = {
    crypto: publicTypes_1.NamingServiceName.UNS,
    zil: publicTypes_1.NamingServiceName.ZNS,
};
exports.findNamingServiceName = function (domain) {
    var extension = domain.split('.').pop();
    if (!extension) {
        return '';
    }
    else if (extension in exports.domainExtensionToNamingServiceName) {
        return exports.domainExtensionToNamingServiceName[extension];
    }
    else {
        return exports.domainExtensionToNamingServiceName.crypto;
    }
};
exports.EthereumNetworks = {
    mainnet: 1,
    ropsten: 3,
    rinkeby: 4,
    goerli: 5,
    'polygon-mainnet': 137,
    'polygon-mumbai': 80001,
};
exports.EthereumNetworksInverted = {
    1: 'mainnet',
    3: 'ropsten',
    4: 'rinkeby',
    5: 'goerli',
    137: 'polygon-mainnet',
    80001: 'polygon-mumbai',
};
