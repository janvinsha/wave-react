"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var znsUtils_1 = require("./utils/znsUtils");
var utils_1 = require("./utils");
var types_1 = require("./types");
var resolutionError_1 = require("./errors/resolutionError");
var publicTypes_1 = require("./types/publicTypes");
var FetchProvider_1 = __importDefault(require("./FetchProvider"));
var namehash_1 = require("./utils/namehash");
var NamingService_1 = require("./NamingService");
var configurationError_1 = __importStar(require("./errors/configurationError"));
/**
 * @internal
 */
var Zns = /** @class */ (function (_super) {
    __extends(Zns, _super);
    function Zns(source) {
        if (source === void 0) { source = {
            url: Zns.UrlMap[1],
            network: 'mainnet',
        }; }
        var _this = _super.call(this) || this;
        _this.name = publicTypes_1.NamingServiceName.ZNS;
        _this.checkNetworkConfig(source);
        _this.network = Zns.NetworkNameMap[source.network];
        _this.url = source['url'] || Zns.UrlMap[_this.network];
        _this.provider =
            source['provider'] || new FetchProvider_1.default(_this.name, _this.url);
        _this.registryAddr =
            source['registryAddress'] || Zns.RegistryMap[_this.network];
        _this.checkRegistryAddress(_this.registryAddr);
        if (_this.registryAddr.startsWith('0x')) {
            _this.registryAddr = znsUtils_1.toBech32Address(_this.registryAddr);
        }
        return _this;
    }
    Zns.prototype.serviceName = function () {
        return this.name;
    };
    Zns.prototype.owner = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordAddresses, ownerAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordsAddresses(domain)];
                    case 1:
                        recordAddresses = _a.sent();
                        if (!recordAddresses) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        }
                        ownerAddress = recordAddresses[0];
                        if (!ownerAddress) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, ownerAddress];
                }
            });
        });
    };
    Zns.prototype.resolver = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordsAddresses, resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordsAddresses(domain)];
                    case 1:
                        recordsAddresses = _a.sent();
                        if (!recordsAddresses || !recordsAddresses[0]) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnregisteredDomain, {
                                domain: domain,
                            });
                        }
                        resolverAddress = recordsAddresses[1];
                        if (utils_1.isNullAddress(resolverAddress)) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnspecifiedResolver, {
                                domain: domain,
                            });
                        }
                        return [2 /*return*/, resolverAddress];
                }
            });
        });
    };
    Zns.prototype.namehash = function (domain) {
        if (!this.checkDomain(domain)) {
            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                domain: domain,
            });
        }
        return namehash_1.znsNamehash(domain);
    };
    Zns.prototype.childhash = function (parentHash, label) {
        return namehash_1.znsChildhash(parentHash, label);
    };
    Zns.prototype.isSupportedDomain = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.checkDomain(domain)];
            });
        });
    };
    Zns.prototype.record = function (domain, key) {
        return __awaiter(this, void 0, void 0, function () {
            var returnee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.records(domain, [key])];
                    case 1:
                        returnee = (_a.sent())[key];
                        if (!returnee) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.RecordNotFound, {
                                domain: domain,
                                recordName: key,
                            });
                        }
                        return [2 /*return*/, returnee];
                }
            });
        });
    };
    Zns.prototype.records = function (domain, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var records;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.allRecords(domain)];
                    case 1:
                        records = _a.sent();
                        return [2 /*return*/, utils_1.constructRecords(keys, records)];
                }
            });
        });
    };
    Zns.prototype.allRecords = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var resolverAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolver(domain)];
                    case 1:
                        resolverAddress = _a.sent();
                        return [2 /*return*/, this.getResolverRecords(resolverAddress)];
                }
            });
        });
    };
    Zns.prototype.twitter = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    domain: domain,
                    methodName: 'twitter',
                });
            });
        });
    };
    Zns.prototype.reverse = function (address, currencyTicker) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    methodName: 'reverse',
                });
            });
        });
    };
    Zns.prototype.isRegistered = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var recordAddresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRecordsAddresses(domain)];
                    case 1:
                        recordAddresses = _a.sent();
                        return [2 /*return*/, Boolean(recordAddresses && recordAddresses[0])];
                }
            });
        });
    };
    Zns.prototype.getTokenUri = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    methodName: 'getTokenUri',
                });
            });
        });
    };
    Zns.prototype.getDomainFromTokenId = function (tokenId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
                    methodName: 'getDomainFromTokenId',
                });
            });
        });
    };
    Zns.prototype.isAvailable = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isRegistered(domain)];
                    case 1: return [2 /*return*/, !(_a.sent())];
                }
            });
        });
    };
    Zns.prototype.registryAddress = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.registryAddr];
            });
        });
    };
    Zns.prototype.locations = function (domains) {
        throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedMethod, {
            method: publicTypes_1.NamingServiceName.ZNS,
            methodName: 'locations',
        });
    };
    Zns.prototype.getRecordsAddresses = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var registryRecord, _a, ownerAddress, resolverAddress;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isSupportedDomain(domain)) {
                            throw new resolutionError_1.ResolutionError(resolutionError_1.ResolutionErrorCode.UnsupportedDomain, {
                                domain: domain,
                            });
                        }
                        return [4 /*yield*/, this.getContractMapValue(this.registryAddr, 'records', this.namehash(domain))];
                    case 1:
                        registryRecord = _b.sent();
                        if (!registryRecord) {
                            return [2 /*return*/, undefined];
                        }
                        _a = registryRecord.arguments, ownerAddress = _a[0], resolverAddress = _a[1];
                        return [2 /*return*/, [
                                ownerAddress.startsWith('0x')
                                    ? znsUtils_1.toBech32Address(ownerAddress)
                                    : ownerAddress,
                                resolverAddress,
                            ]];
                }
            });
        });
    };
    Zns.prototype.getResolverRecords = function (resolverAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var resolver;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (utils_1.isNullAddress(resolverAddress)) {
                            return [2 /*return*/, {}];
                        }
                        resolver = znsUtils_1.toChecksumAddress(resolverAddress);
                        return [4 /*yield*/, this.getContractField(resolver, 'records')];
                    case 1: return [2 /*return*/, ((_a.sent()) ||
                            {})];
                }
            });
        });
    };
    Zns.prototype.fetchSubState = function (contractAddress, field, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var params, method;
            return __generator(this, function (_a) {
                params = [contractAddress.replace('0x', ''), field, keys];
                method = 'GetSmartContractSubState';
                return [2 /*return*/, this.provider.request({ method: method, params: params })];
            });
        });
    };
    Zns.prototype.getContractField = function (contractAddress, field, keys) {
        if (keys === void 0) { keys = []; }
        return __awaiter(this, void 0, void 0, function () {
            var contractAddr, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contractAddr = contractAddress.startsWith('zil1')
                            ? znsUtils_1.fromBech32Address(contractAddress)
                            : contractAddress;
                        return [4 /*yield*/, this.fetchSubState(contractAddr, field, keys)];
                    case 1:
                        result = (_a.sent()) || {};
                        return [2 /*return*/, result[field]];
                }
            });
        });
    };
    Zns.prototype.getContractMapValue = function (contractAddress, field, key) {
        return __awaiter(this, void 0, void 0, function () {
            var record;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getContractField(contractAddress, field, [key])];
                    case 1:
                        record = _a.sent();
                        return [2 /*return*/, (record && record[key]) || null];
                }
            });
        });
    };
    Zns.prototype.checkDomain = function (domain) {
        var tokens = domain.split('.');
        return (!!tokens.length &&
            tokens[tokens.length - 1] === 'zil' &&
            tokens.every(function (v) { return !!v.length; }));
    };
    Zns.prototype.checkNetworkConfig = function (source) {
        if (!source.network) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.UnsupportedNetwork, {
                method: publicTypes_1.NamingServiceName.ZNS,
            });
        }
        if (!types_1.ZnsSupportedNetwork.guard(source.network)) {
            this.checkCustomNetworkConfig(source);
        }
    };
    Zns.prototype.checkRegistryAddress = function (address) {
        // Represents both versions of Zilliqa addresses eth-like and bech32 zil-like
        var addressValidator = new RegExp('^0x[a-fA-F0-9]{40}$|^zil1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$');
        if (!addressValidator.test(address)) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.InvalidConfigurationField, {
                method: this.name,
                field: 'registryAddress',
            });
        }
    };
    Zns.prototype.checkCustomNetworkConfig = function (source) {
        if (!source.registryAddress) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.CustomNetworkConfigMissing, {
                method: publicTypes_1.NamingServiceName.ZNS,
                config: 'registryAddress',
            });
        }
        if (!source['url'] && !source['provider']) {
            throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.CustomNetworkConfigMissing, {
                method: publicTypes_1.NamingServiceName.ZNS,
                config: 'url or provider',
            });
        }
    };
    Zns.UrlMap = {
        1: 'https://api.zilliqa.com',
        333: 'https://dev-api.zilliqa.com',
        111: 'http://localhost:4201',
    };
    Zns.NetworkNameMap = {
        mainnet: 1,
        testnet: 333,
        localnet: 111,
    };
    Zns.RegistryMap = {
        1: 'zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz',
        333: 'zil1hyj6m5w4atcn7s806s69r0uh5g4t84e8gp6nps',
    };
    return Zns;
}(NamingService_1.NamingService));
exports.default = Zns;
